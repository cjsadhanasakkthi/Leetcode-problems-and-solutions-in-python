The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.
You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.
For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.
Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.


'''
class Solution(object):
    def nextGreaterElement(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        # Dictionary to store the next greater element for each number in nums2
        next_greater = {}
        stack = []

        # Traverse nums2 in reverse order
        for num in reversed(nums2):
            # Maintain the stack such that the top is always greater than the current number
            while stack and stack[-1] <= num:
                stack.pop()
            # The next greater element is the top of the stack if it exists
            next_greater[num] = stack[-1] if stack else -1
            # Push the current number onto the stack
            stack.append(num)

        # Build the result for nums1 based on the next_greater dictionary
        return [next_greater[num] for num in nums1]

# Example usage:
sol = Solution()
nums1 = [4,1,2]
nums2 = [1,3,4,2]
print(sol.nextGreaterElement(nums1, nums2))  # Output: [-1, 3, -1]
'''
